//
// File: speed_hat.cpp
//
// MATLAB Coder version            : 23.2
// C/C++ source code generated on  : 22-Jul-2024 20:48:21
//

// Include Files
#include <cmath>
namespace app::controller {
// Function Definitions
//
// SPEED_HAT
//     SPEED_HAT =
//     SPEED_HAT(T_bll,T_blr,T_lwl,T_lwr,DT,LL,LR,PHID,SD,THETA_LL,THETA_LR)
//
// Arguments    : double T_bll
//                double T_blr
//                double T_lwl
//                double T_lwr
//                double dt
//                double ll
//                double lr
//                double phid
//                double sd
//                double theta_ll
//                double theta_lr
//                double b_speed_hat[2]
// Return Type  : void
//
void speed_hat(
    double T_bll, double T_blr, double T_lwl, double T_lwr, double dt, double ll, double lr,
    double phid, double sd, double theta_ll, double theta_lr, double b_speed_hat[2]) {
    double ab_speed_hat_tmp;
    double b_speed_hat_tmp;
    double bb_speed_hat_tmp;
    double c_speed_hat_tmp;
    double cb_speed_hat_tmp;
    double d_speed_hat_tmp;
    double db_speed_hat_tmp;
    double e_speed_hat_tmp;
    double eb_speed_hat_tmp;
    double f_speed_hat_tmp;
    double fb_speed_hat_tmp;
    double g_speed_hat_tmp;
    double gb_speed_hat_tmp;
    double h_speed_hat_tmp;
    double hb_speed_hat_tmp;
    double i_speed_hat_tmp;
    double ib_speed_hat_tmp;
    double j_speed_hat_tmp;
    double jb_speed_hat_tmp;
    double k_speed_hat_tmp;
    double kb_speed_hat_tmp;
    double l_speed_hat_tmp;
    double lb_speed_hat_tmp;
    double m_speed_hat_tmp;
    double mb_speed_hat_tmp;
    double n_speed_hat_tmp;
    double nb_speed_hat_tmp;
    double o_speed_hat_tmp;
    double ob_speed_hat_tmp;
    double p_speed_hat_tmp;
    double pb_speed_hat_tmp;
    double q_speed_hat_tmp;
    double qb_speed_hat_tmp;
    double r_speed_hat_tmp;
    double rb_speed_hat_tmp;
    double s_speed_hat_tmp;
    double sb_speed_hat_tmp;
    double speed_hat_tmp;
    double t10;
    double t11;
    double t12;
    double t12_tmp;
    double t13;
    double t13_tmp;
    double t15;
    double t15_tmp;
    double t16;
    double t16_tmp;
    double t17;
    double t17_tmp;
    double t18;
    double t19;
    double t20;
    double t20_tmp;
    double t22;
    double t22_tmp;
    double t23;
    double t3;
    double t31;
    double t32;
    double t33;
    double t35;
    double t36;
    double t38;
    double t38_tmp;
    double t39;
    double t4;
    double t41;
    double t41_tmp;
    double t44;
    double t46;
    double t47;
    double t48;
    double t50;
    double t52;
    double t54;
    double t55;
    double t58;
    double t8;
    double t9;
    double t_speed_hat_tmp;
    double tb_speed_hat_tmp;
    double u_speed_hat_tmp;
    double ub_speed_hat_tmp;
    double v_speed_hat_tmp;
    double vb_speed_hat_tmp;
    double w_speed_hat_tmp;
    double wb_speed_hat_tmp;
    double x_speed_hat_tmp;
    double xb_speed_hat_tmp;
    double y_speed_hat_tmp;
    double yb_speed_hat_tmp;
    //     This function was generated by the Symbolic Math Toolbox version 23.2.
    //     2024-07-22 20:48:09
    t3      = phid * 1.896810371147265E+64;
    t4      = sd * -8.6218653233966575E+64;
    t8      = ll * ll;
    t9      = std::pow(ll, 3.0);
    t11     = lr * lr;
    t12_tmp = T_bll * dt;
    t12     = t12_tmp * 8.238559777232E+63;
    t13_tmp = T_blr * dt;
    t13     = t13_tmp * 8.238559777232E+63;
    t15_tmp = ll * phid;
    t15     = t15_tmp * 8.09858927818164E+63;
    t16_tmp = ll * sd;
    t16     = t16_tmp * 3.6811769446280182E+64;
    t17_tmp = lr * phid;
    t17     = t17_tmp * 1.928801711891184E+64;
    t18     = dt * theta_ll * 2.5569264910322841E+63;
    t19     = dt * theta_lr * 2.5569264910322841E+63;
    t20_tmp = lr * sd;
    t20     = t20_tmp * -8.7672805085962916E+64;
    t22_tmp = ll * lr;
    t22     = t22_tmp * phid * 6.2852132630598919E+65;
    t23     = t22_tmp * sd * -2.8569151195726779E+66;
    t10     = t8 * t8;
    t31     = phid * t11 * 6.8108794279698349E+65;
    t33     = sd * t11 * -3.0958542854408339E+66;
    t36     = phid * t9 * 8.6152276813972426E+65;
    t38_tmp = phid * t8;
    t38     = t38_tmp * 9.23907043255077E+65;
    t39     = sd * t9 * 3.9160125824532922E+66;
    t41_tmp = sd * t8;
    t41     = t41_tmp * -4.1995774693412587E+66;
    t44     = t16_tmp * t11 * -9.2191800151432E+65;
    t46     = t17_tmp * t9 * 3.663056638828053E+67;
    t47     = t17_tmp * t8 * 1.3257725329517249E+66;
    t48     = t20_tmp * t9 * -1.665025744921842E+68;
    t50     = t20_tmp * t8 * -6.0262387861442038E+66;
    t52     = t15_tmp * t11 * 2.0282196033315041E+65;
    t54     = t38_tmp * t11 * 4.0056954246239863E+67;
    t55     = t41_tmp * t11 * -1.8207706475563569E+68;
    t32     = phid * t10 * 1.105597363187494E+67;
    t35     = sd * t10 * 5.0254425599431537E+67;
    t58     = 1.0
        / (((((((((((lr * 1.4027648813754071E+21 + ll * -5.8898831114048281E+20)
                    + t22_tmp * 4.5710641913162854E+22)
                   + t11 * 4.9533668567053337E+22)
                  + t10 * -8.0407080959090463E+23)
                 + t9 * -6.2656201319252681E+22)
                + t8 * 6.7193239509460144E+22)
               + lr * t9 * 2.6640411918749479E+24)
              + lr * t8 * 9.6419820578307272E+22)
             + ll * t11 * 1.475068802422912E+22)
            + t8 * t11 * 2.9132330360901712E+24)
           + 1.379498451743465E+21);
    speed_hat_tmp    = T_lwl * dt;
    b_speed_hat_tmp  = T_lwr * dt;
    c_speed_hat_tmp  = dt * ll;
    d_speed_hat_tmp  = dt * lr;
    e_speed_hat_tmp  = dt * t8;
    f_speed_hat_tmp  = dt * t9;
    g_speed_hat_tmp  = dt * t10;
    h_speed_hat_tmp  = dt * t11;
    i_speed_hat_tmp  = speed_hat_tmp * t8;
    j_speed_hat_tmp  = b_speed_hat_tmp * t8;
    k_speed_hat_tmp  = c_speed_hat_tmp * lr;
    l_speed_hat_tmp  = c_speed_hat_tmp * t11;
    m_speed_hat_tmp  = d_speed_hat_tmp * t8;
    n_speed_hat_tmp  = d_speed_hat_tmp * t9;
    o_speed_hat_tmp  = e_speed_hat_tmp * t11;
    p_speed_hat_tmp  = t12_tmp * ll;
    q_speed_hat_tmp  = t13_tmp * ll;
    r_speed_hat_tmp  = speed_hat_tmp * ll;
    s_speed_hat_tmp  = b_speed_hat_tmp * ll;
    t_speed_hat_tmp  = t12_tmp * lr;
    u_speed_hat_tmp  = t13_tmp * lr;
    v_speed_hat_tmp  = speed_hat_tmp * lr;
    w_speed_hat_tmp  = b_speed_hat_tmp * lr;
    x_speed_hat_tmp  = t12_tmp * t8;
    y_speed_hat_tmp  = t12_tmp * t9;
    ab_speed_hat_tmp = t12_tmp * t11;
    bb_speed_hat_tmp = t13_tmp * t8;
    cb_speed_hat_tmp = t13_tmp * t9;
    db_speed_hat_tmp = speed_hat_tmp * t9;
    eb_speed_hat_tmp = speed_hat_tmp * t10;
    fb_speed_hat_tmp = speed_hat_tmp * t11;
    gb_speed_hat_tmp = b_speed_hat_tmp * t9;
    t12_tmp          = b_speed_hat_tmp * t10;
    t13_tmp          = b_speed_hat_tmp * t11;
    t10              = c_speed_hat_tmp * theta_ll;
    c_speed_hat_tmp *= theta_lr;
    hb_speed_hat_tmp = d_speed_hat_tmp * theta_ll;
    d_speed_hat_tmp *= theta_lr;
    ib_speed_hat_tmp = e_speed_hat_tmp * theta_ll;
    jb_speed_hat_tmp = f_speed_hat_tmp * theta_ll;
    kb_speed_hat_tmp = g_speed_hat_tmp * theta_ll;
    lb_speed_hat_tmp = h_speed_hat_tmp * theta_ll;
    e_speed_hat_tmp *= theta_lr;
    f_speed_hat_tmp *= theta_lr;
    g_speed_hat_tmp *= theta_lr;
    h_speed_hat_tmp *= theta_lr;
    mb_speed_hat_tmp = i_speed_hat_tmp * t11;
    nb_speed_hat_tmp = j_speed_hat_tmp * t11;
    ob_speed_hat_tmp = k_speed_hat_tmp * theta_ll;
    k_speed_hat_tmp *= theta_lr;
    pb_speed_hat_tmp = l_speed_hat_tmp * theta_ll;
    l_speed_hat_tmp *= theta_lr;
    qb_speed_hat_tmp = m_speed_hat_tmp * theta_ll;
    rb_speed_hat_tmp = n_speed_hat_tmp * theta_ll;
    m_speed_hat_tmp *= theta_lr;
    n_speed_hat_tmp *= theta_lr;
    sb_speed_hat_tmp = o_speed_hat_tmp * theta_ll;
    o_speed_hat_tmp *= theta_lr;
    tb_speed_hat_tmp = p_speed_hat_tmp * lr;
    ub_speed_hat_tmp = q_speed_hat_tmp * lr;
    vb_speed_hat_tmp = r_speed_hat_tmp * lr;
    wb_speed_hat_tmp = s_speed_hat_tmp * lr;
    xb_speed_hat_tmp = p_speed_hat_tmp * t11;
    yb_speed_hat_tmp = r_speed_hat_tmp * t11;
    t20_tmp          = s_speed_hat_tmp * t11;
    t15_tmp          = t_speed_hat_tmp * t8;
    t38_tmp          = u_speed_hat_tmp * t8;
    t41_tmp          = v_speed_hat_tmp * t8;
    t22_tmp          = v_speed_hat_tmp * t9;
    t17_tmp          = w_speed_hat_tmp * t8;
    t16_tmp          = w_speed_hat_tmp * t9;
    b_speed_hat[0] = t58 * (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((t3 + t4) + t12) + t13) - t15) + t16) + t17) + t18) + t19) + t20) + t22) + t23) + t31) - t32) + t33) + t35) - t36) + t38) + t39) + t41) + t44) + t46) + t47) + t48) + t50) + t52) + t54) + t55) - speed_hat_tmp * 2.8789436073322019E+65) + b_speed_hat_tmp * 1.216070147303516E+65) + p_speed_hat_tmp * 2.191119594109415E+66) + q_speed_hat_tmp * 7.4266784871915E+64) - r_speed_hat_tmp * 2.413592312240607E+66) - s_speed_hat_tmp * 2.7815741776232958E+64) + t_speed_hat_tmp * 1.497329187E+64) + u_speed_hat_tmp * 2.2741405277025E+66) - v_speed_hat_tmp * 1.95391507973855E+65) - w_speed_hat_tmp * 2.5033064448713782E+66) - x_speed_hat_tmp * 1.6665870038188371E+66) - y_speed_hat_tmp * 2.1722649642599869E+67) + ab_speed_hat_tmp * 2.29935577E+65) + bb_speed_hat_tmp * 3.602230076967875E+65) + cb_speed_hat_tmp * 2.3489016027614569E+66) - i_speed_hat_tmp * 4.1898016044513339E+67) + db_speed_hat_tmp * 5.92952262159179E+67) + eb_speed_hat_tmp * 4.5884719802624362E+68) - fb_speed_hat_tmp * 1.130995811735E+67) + j_speed_hat_tmp * 3.01314689936479E+66) - gb_speed_hat_tmp * 6.5551030141501247E+66) - t12_tmp * 4.1564701291305438E+67) - t13_tmp * 3.1003475249978331E+67) + t10 * 1.386429907248264E+66) + c_speed_hat_tmp * 4.3511863260939961E+64) + hb_speed_hat_tmp * 4.6471237298255737E+63) + d_speed_hat_tmp * 1.3917339954317291E+66) + ib_speed_hat_tmp * 1.87354146427656E+68) - jb_speed_hat_tmp * 1.4963867764941E+68) - kb_speed_hat_tmp * 1.862547525708166E+69) + lb_speed_hat_tmp * 7.1363003238367753E+64) + e_speed_hat_tmp * 2.9625778199480032E+65) + f_speed_hat_tmp * 1.623703898950793E+66) + ((((((((((((((((((((((((((g_speed_hat_tmp * 5.8340379544820573E+66 + h_speed_hat_tmp * 1.8934143474888669E+68) - mb_speed_hat_tmp * 1.75416969750847E+69) - nb_speed_hat_tmp * 2.01917561263338E+69) + ob_speed_hat_tmp * 1.97855895703866E+66) + k_speed_hat_tmp * 1.1988266848822149E+67) + pb_speed_hat_tmp * 4.4612179833087021E+67) + l_speed_hat_tmp * 4.2003934698049758E+67) + qb_speed_hat_tmp * 2.1516491888174369E+68) + rb_speed_hat_tmp * 6.4199797718421646E+69) + m_speed_hat_tmp * 7.44398805210766E+67) + n_speed_hat_tmp * 5.4124510502892146E+68) + sb_speed_hat_tmp * 6.8781975119085943E+69) + o_speed_hat_tmp * 1.158769781159178E+70) + tb_speed_hat_tmp * 2.2384141517406251E+66) + ub_speed_hat_tmp * 5.04500509075E+65) - vb_speed_hat_tmp * 1.401979457015003E+67) + wb_speed_hat_tmp * 7.15037978403932E+66) + xb_speed_hat_tmp * 8.02195233471875E+67) - yb_speed_hat_tmp * 9.4812294822479173E+67) - t20_tmp * 3.0033840835583331E+66) + t15_tmp * 7.487538941766406E+67) + t38_tmp * 1.391774243765488E+68) - t41_tmp * 1.267678263348389E+68) - t22_tmp * 1.695936264450763E+69) - t17_tmp * 1.484829685745495E+68) + t16_tmp * 3.8561254800896679E+68)) * -2.6666666666666669E-43;
    b_speed_hat[1] = t58 * (((((((((((((((((((((((((((((((((((((((((((((((((((((((((-t3 + t4) + t12) + t13) + t15) + t16) - t17) + t18) + t19) + t20) - t22) + t23) - t31) + t32) + t33) + t35) + t36) - t38) + t39) + t41) + t44) - t46) - t47) + t48) + t50) - t52) - t54) + t55) + speed_hat_tmp * 1.216070147303516E+65) - b_speed_hat_tmp * 2.8789436073322019E+65) + p_speed_hat_tmp * 2.3338643939444149E+66) + q_speed_hat_tmp * 7.4697158111915E+64) - r_speed_hat_tmp * 2.7457860317711459E+66) + s_speed_hat_tmp * 1.5337688433823981E+65) + t_speed_hat_tmp * 1.454291863E+64) + u_speed_hat_tmp * 2.1313957278675E+66) + v_speed_hat_tmp * 2.14663845123535E+65) - w_speed_hat_tmp * 2.762360704552702E+66) - x_speed_hat_tmp * 1.7696497542688369E+66) - y_speed_hat_tmp * 2.3138425183123311E+67) + ab_speed_hat_tmp * 2.34015202E+65) + bb_speed_hat_tmp * 3.5133676852178751E+65) + cb_speed_hat_tmp * 2.250224939554426E+66) - i_speed_hat_tmp * 2.3798968806135459E+67) + db_speed_hat_tmp * 4.36752490732881E+67) + eb_speed_hat_tmp * 2.3968996720718188E+68) + fb_speed_hat_tmp * 3.454231186789E+66) - j_speed_hat_tmp * 1.7122918955733179E+67) + gb_speed_hat_tmp * 1.220910748864535E+67) + t12_tmp * 1.9886824234006151E+68) - t13_tmp * 4.3466848209367333E+67) + t10 * 1.430732305971386E+66) + c_speed_hat_tmp * 4.364543426948305E+64) + hb_speed_hat_tmp * 4.5135527212824872E+63) + d_speed_hat_tmp * 1.347431596708606E+66) + ib_speed_hat_tmp * 1.99561411353766E+68) - jb_speed_hat_tmp * 1.5891490476431541E+68) + ((((((((((((((((((((((((((((((kb_speed_hat_tmp * -1.9839392193249889E+69 + lb_speed_hat_tmp * 7.2629159158581551E+64) + e_speed_hat_tmp * 2.945687722024324E+65) + f_speed_hat_tmp * 1.571007503967175E+66) + g_speed_hat_tmp * 5.588951741549736E+66) + h_speed_hat_tmp * 1.7745672275573351E+68) - mb_speed_hat_tmp * 9.5499169417878883E+68) - nb_speed_hat_tmp * 2.764444660046655E+69) + ob_speed_hat_tmp * 1.991918866779009E+66) + k_speed_hat_tmp * 1.16527768599971E+67) + pb_speed_hat_tmp * 4.65275609887628E+67) + l_speed_hat_tmp * 3.7501770798252213E+67) + qb_speed_hat_tmp * 2.3045486289362981E+68) + rb_speed_hat_tmp * 6.8080005272831754E+69) + m_speed_hat_tmp * 7.106564276320142E+67) + n_speed_hat_tmp * 5.1302203183152824E+68) + sb_speed_hat_tmp * 7.3107156466169966E+69) + o_speed_hat_tmp * 1.0917018774469521E+70) + tb_speed_hat_tmp * 2.4003580690406251E+66) + ub_speed_hat_tmp * 4.504259564E+65) - vb_speed_hat_tmp * 4.9521094722776877E+65) - wb_speed_hat_tmp * 6.638001566912856E+66) + xb_speed_hat_tmp * 8.5263926120625E+67) - yb_speed_hat_tmp * 9.6026470170405E+67) - t20_tmp * 6.29771764782E+66) + t15_tmp * 7.9400825041808591E+67) + t38_tmp * 1.311220381826973E+68) - t41_tmp * 1.05690234575141E+68) - t22_tmp * 9.59826038944112E+68) - t17_tmp * 1.681962847822255E+68) - t16_tmp * 4.2568234622639579E+68)) * -2.6666666666666669E-43;
}
//
// File trailer for speed_hat.cpp
//
// [EOF]
//
} // namespace app::controller